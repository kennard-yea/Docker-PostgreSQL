#!/bin/bash
#
# Take a base backup of PostgreSQL, store in a backup home using version and cluster names to sort
#

for file in $(ls /var/lib/postgresql/lib/*); do source ${file}; done # Import library functions and aliases
test_libsource || echo "Library import failed! Please check!" 1>&2 # && exit 1

# Postgres-general environment variables
export PGHOST="pgdb1"
export PGPORT="5432"
export PGDATABASE="postgres"
export PGUSER="postgres"
export PGPASSFILE="/var/lib/postgresql/.pgpass"
export PATH="/usr/lib/postgresql/14/bin/:$PATH" # Adding PATH in here to hold in case manually adding postgres bin directories to PATH is desired

# Script-specific global readonly
readonly _pgsbkupdir="/var/lib/postgresql/backup/base/${PGVERSION}/${PGCLUSTER}/"
readonly _pgswalarchdir="/var/lib/postgresql/walarchive/${PGVERSION}/${PGCLUSTER}/" 
readonly _pgssupportlist=("14" "13" "12" "11" "10" "9.6")

# Script-specific modifiable globals
declare _pgsversion
declare _pgscluster
declare -l _xlog_or_wal

function usage()
{
    echo "Usage: pg-basebackup [-D pgsbkupdir] [-W pgswalarchdir]
    " 1>&2
    exit 1
}

function check_environment()
{
    _pgsversion="$(get_pgversion)" || return 1
    _pgscluster="$(get_pgclustername)" || return 1

    # Reference for version detection https://why-upgrade.depesz.com/show?from=9.6&to=14&keywords=pg_basebackup
    case ${_pgsversion} in
        "9.6")
            _xlog_or_wal="xlog"
        ;;
        "10"|"11"|"12"|"13"|"14")
            _xlog_or_wal="wal"
        ;;
        *)
            echo "PostgreSQL Version ${_pgsversion} is not supported or is invalid!" 1>&2 && return 1
        ;;
    esac

    return 0
}

function initialize_backupdirs()
{
    local returncode=0
    mkdir -p _pgsbkupdir || returncode=$(( ${returncode} + 1 ))
    mkdir -p _pgswalarchdir || returncode=$(( ${returncode} + 1 ))
    return ${returncode}
}
